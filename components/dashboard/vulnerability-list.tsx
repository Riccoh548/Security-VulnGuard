"use client"

import { useEffect, useState } from "react"
import { createClient } from "@/lib/supabase/client"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { AlertTriangle, Shield, Clock, CheckCircle } from "lucide-react"
import type { Database } from "@/lib/supabase/types"

type Vulnerability = Database["public"]["Tables"]["vulnerabilities"]["Row"]

const severityColors = {
  Critical: "bg-red-500 hover:bg-red-600",
  High: "bg-orange-500 hover:bg-orange-600",
  Medium: "bg-yellow-500 hover:bg-yellow-600",
  Low: "bg-blue-500 hover:bg-blue-600",
  Info: "bg-gray-500 hover:bg-gray-600",
}

const severityIcons = {
  Critical: AlertTriangle,
  High: AlertTriangle,
  Medium: Shield,
  Low: Shield,
  Info: Shield,
}

export function VulnerabilityList() {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [loading, setLoading] = useState(true)
  const supabase = createClient()

  useEffect(() => {
    fetchVulnerabilities()
  }, [])

  const fetchVulnerabilities = async () => {
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser()
      if (!user) return

      // Get user's organization
      const { data: orgMember } = await supabase
        .from("organization_members")
        .select("organization_id")
        .eq("user_id", user.id)
        .single()

      if (!orgMember) return

      // Fetch vulnerabilities
      const { data, error } = await supabase
        .from("vulnerabilities")
        .select("*")
        .eq("organization_id", orgMember.organization_id)
        .order("created_at", { ascending: false })

      if (error) {
        console.error("Error fetching vulnerabilities:", error)
      } else {
        setVulnerabilities(data || [])
      }
    } catch (error) {
      console.error("Error:", error)
    } finally {
      setLoading(false)
    }
  }

  const updateVulnerabilityStatus = async (id: string, status: string) => {
    const { error } = await supabase.from("vulnerabilities").update({ status }).eq("id", id)

    if (!error) {
      setVulnerabilities((prev) => prev.map((vuln) => (vuln.id === id ? { ...vuln, status } : vuln)))
    }
  }

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerabilities</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          Vulnerabilities
          <Badge variant="secondary">{vulnerabilities.length} total</Badge>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[400px]">
          <div className="space-y-4">
            {vulnerabilities.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Shield className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p>No vulnerabilities found</p>
                <p className="text-sm">Your security posture looks good!</p>
              </div>
            ) : (
              vulnerabilities.map((vuln) => {
                const SeverityIcon = severityIcons[vuln.severity]
                return (
                  <div key={vuln.id} className="border rounded-lg p-4 space-y-3">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start gap-3">
                        <SeverityIcon className="h-5 w-5 mt-0.5 text-gray-600" />
                        <div className="flex-1">
                          <h4 className="font-medium">{vuln.title}</h4>
                          {vuln.description && <p className="text-sm text-gray-600 mt-1">{vuln.description}</p>}
                          {vuln.ai_summary && (
                            <div className="mt-2 p-2 bg-blue-50 rounded text-sm">
                              <strong>AI Summary:</strong> {vuln.ai_summary}
                            </div>
                          )}
                        </div>
                      </div>
                      <Badge className={severityColors[vuln.severity]}>{vuln.severity}</Badge>
                    </div>

                    <div className="flex items-center justify-between text-sm text-gray-500">
                      <div className="flex items-center gap-4">
                        {vuln.cve_id && <span>CVE: {vuln.cve_id}</span>}
                        {vuln.cvss_score && <span>CVSS: {vuln.cvss_score}</span>}
                        {vuln.category && <span>Category: {vuln.category}</span>}
                      </div>
                      <div className="flex items-center gap-2">
                        <Badge variant={vuln.status === "open" ? "destructive" : "secondary"} className="text-xs">
                          {vuln.status === "open" && <Clock className="h-3 w-3 mr-1" />}
                          {vuln.status === "resolved" && <CheckCircle className="h-3 w-3 mr-1" />}
                          {vuln.status}
                        </Badge>
                      </div>
                    </div>

                    {vuln.remediation_steps && (
                      <div className="mt-3 p-3 bg-green-50 rounded text-sm">
                        <strong>Remediation:</strong>
                        <p className="mt-1">{vuln.remediation_steps}</p>
                      </div>
                    )}

                    <div className="flex gap-2 pt-2">
                      {vuln.status === "open" && (
                        <>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => updateVulnerabilityStatus(vuln.id, "in_progress")}
                          >
                            Mark In Progress
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => updateVulnerabilityStatus(vuln.id, "resolved")}
                          >
                            Mark Resolved
                          </Button>
                        </>
                      )}
                      {vuln.status === "in_progress" && (
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => updateVulnerabilityStatus(vuln.id, "resolved")}
                        >
                          Mark Resolved
                        </Button>
                      )}
                      {vuln.status === "resolved" && (
                        <Button size="sm" variant="outline" onClick={() => updateVulnerabilityStatus(vuln.id, "open")}>
                          Reopen
                        </Button>
                      )}
                    </div>
                  </div>
                )
              })
            )}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  )
}
